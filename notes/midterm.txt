
New struct s() is valid, but without new it's totally wrong

	In a superset of info, the subset will be converted and some values may be lost


What must be true after copying an object? The objects must have the same value aka the 	values of those objects must be equal after copying.
	Why? We must meet our expectations. We expect that to be true so we much each that 	expectance

Creating a random number:
#include <random>

std::default_random_device prng;
std::bernoulli_deistribution coin(0.75); // The 0.75 makes it 3/4 likely a heads will 
coin(pong);				 //turn up when flipping the coin
Std::uniform_int_distribution<> d6;(1,6)
d6(prng)

//For shuffle:
Stf::shuffle(deck.begin(), deck.end(), prng)
// What if you want to organize the cards?
Must sort spades diamonds clubs hearts
Even if we sort different decks in the same way, they may not be identical 

Lexicographical comparison:
	if(A.S < B.S)
		return true;
	if(B.S < A.S)
		return false;
	return A.R < P.R;

Interesting: NaN  NaN.= false
	     NaN ==NaN
Card& operator=(const &Card c){
	tank = c.rank;
	suit = c.suit

}

Card(const Card& c)
: rank(c.rank), suit(c.suit)
{}

Card(Rank r, Suit s) : rank(r), suit(s)
{}







